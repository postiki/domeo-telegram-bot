import {Markup, Scenes} from "telegraf";
import {completeUserFunnel, updateUserStage} from "../../repositories/UserRepo";
import {UserStage} from "../../db/models/User";
import {MyContext} from "../types";
import {message} from "telegraf/filters";
import {removeNotifications, scheduleNotification} from "../../redis/scheduleUserNotify";
import {NotificationType} from "utils/notify";

export const calculateCost = new Scenes.WizardScene<MyContext>('CALCULATE_COST',
    async ctx => {
        if (ctx.chat) {
            const telegramId = ctx.chat.id.toString();
            await ctx.replyWithMarkdownV2(
                '–í–æ–ø—Ä–æ—Å 1 –∏–∑ 4\n' +
                '–ö–∞–∫–æ–π —Ä–µ–º–æ–Ω—Ç –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º \\?',
                Markup.keyboard(['–ö–æ—Å–º–µ—Ç–∏—á–µ–∫–∏–π', '–ö–∞–ø–∏—Ç–µ–ª—å–Ω—ã–π'
                ])
            );
            await scheduleNotification(telegramId, UserStage.Enum.TYPE_OF_REPAIR, NotificationType.STAGE_REMINDER)
            return ctx.wizard.next();
        }
    },
    async ctx => {
        if (ctx.has(message("text"))) {
            const message = ctx.message.text;
            const telegramId = ctx.chat.id.toString();

            await updateUserStage(telegramId, UserStage.Enum.TYPE_OF_REPAIR, message)
            await removeNotifications(telegramId, UserStage.Enum.TYPE_OF_REPAIR, NotificationType.STAGE_REMINDER)

            await ctx.replyWithMarkdownV2(
                '–í–æ–ø—Ä–æ—Å 2 –∏–∑ 4\n' +
                '–û—Ç–ª–∏—á–Ω–æ\\. –ö–∞–∫–æ–π –∫–ª–∞—Å—Å –≤–∞–º –±–ª–∏–∂–µ\\?',
                Markup.keyboard(['–ö–æ–º—Ñ–æ—Ä—Ç', '–ë–∏–∑–Ω–µ—Å'])
            );
            await scheduleNotification(telegramId, UserStage.Enum.CLASS_OF_REPAIR, NotificationType.STAGE_REMINDER)
            return ctx.wizard.next();
        }
    },
    async ctx => {
        if (ctx.has(message("text"))) {
            const message = ctx.message.text;
            const telegramId = ctx.chat.id.toString();

            await updateUserStage(telegramId, UserStage.Enum.CLASS_OF_REPAIR, message)
            await removeNotifications(telegramId, UserStage.Enum.CLASS_OF_REPAIR, NotificationType.STAGE_REMINDER)

            await ctx.replyWithMarkdownV2(
                '–í–æ–ø—Ä–æ—Å 3 –∏–∑ 4\n' +
                '–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è\\?',
                Markup.keyboard(['–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞', '–í—Ç–æ—Ä—á–∏–∫–∞'])
            );
            await scheduleNotification(telegramId, UserStage.Enum.TYPE_OF_AREA, NotificationType.STAGE_REMINDER)
            return ctx.wizard.next();
        }
    },
    async ctx => {
        if (ctx.has(message("text"))) {
            const message = ctx.message.text;
            const telegramId = ctx.chat.id.toString();

            await updateUserStage(telegramId, UserStage.Enum.TYPE_OF_AREA, message)
            await removeNotifications(telegramId, UserStage.Enum.TYPE_OF_AREA, NotificationType.STAGE_REMINDER)

            await ctx.replyWithMarkdownV2(
                '–í–æ–ø—Ä–æ—Å 4 –∏–∑ 4\n' +
                '–°–∫–æ–ª—å–∫–æ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–æ–≤ –ø–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è\\?\n' +
                '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\\.',
                Markup.removeKeyboard()
            );
            await scheduleNotification(telegramId, UserStage.Enum.AREA_OF_REPAIR, NotificationType.STAGE_REMINDER)
            return ctx.wizard.next();
        }
    },
    async ctx => {
        if (ctx.has(message("text"))) {
            const message = ctx.message.text;
            if (!isNaN(Number(message))) {

                const telegramId = ctx.chat.id.toString();

                await updateUserStage(telegramId, UserStage.Enum.AREA_OF_REPAIR, message)
                await removeNotifications(telegramId, UserStage.Enum.AREA_OF_REPAIR, NotificationType.STAGE_REMINDER)

                await ctx.replyWithMarkdownV2(
                    '–í–∞—à —Ä–∞—Å—á–µ—Ç –≥–æ—Ç–æ–≤\\! –ù–∞ –∫–∞–∫–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ Telegram –≤—ã—Å–ª–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å\\?\n' +
                    '–ù–∞–ø—Ä–∏–º–µ—Ä\\: 79991807777\n' +
                    '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\\.\n' +
                    '–ú—ã –∑–∞–∫—Ä–µ–ø–∏–º –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º üéÅ'
                );
                await scheduleNotification(telegramId, UserStage.Enum.PHONE_NUMBER, NotificationType.FEEDBACK_REMINDER)
                return ctx.wizard.next();
            } else {
                await ctx.replyWithMarkdownV2('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞\\, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏ –ø–æ–º–µ—â–µ–Ω–∏—è\\.');
                return ctx.wizard.selectStep(ctx.wizard.cursor);
            }
        }
    },
    async (ctx) => {
        if (ctx.has(message("text")) && ctx.chat) {
            const message = ctx.message.text;
            const phoneRegex = /^7\d{10}$/;

            if (phoneRegex.test(message)) {
                const telegramId = ctx.chat.id.toString();
                await updateUserStage(telegramId, UserStage.Enum.PHONE_NUMBER, message)
                await removeNotifications(telegramId, UserStage.Enum.PHONE_NUMBER, NotificationType.FEEDBACK_REMINDER)

                await ctx.replyWithMarkdownV2('–°–ø–∞—Å–∏–±–æ\\! –í–∞—à —Ä–∞—Å—á–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä\\.',
                    Markup.removeKeyboard()
                );

                await completeUserFunnel(telegramId);

                await ctx.replyWithMarkdownV2(
                    '–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\\?',
                    Markup.keyboard([
                        ['about company']
                    ])
                );

                return ctx.scene.leave();
            } else {
                await ctx.replyWithMarkdownV2(
                    '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞\\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞\\, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79991807777\\.'
                );
                return ctx.wizard.selectStep(ctx.wizard.cursor);
            }
        }
    }
);